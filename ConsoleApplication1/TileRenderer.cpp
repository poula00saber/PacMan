#include "TileRenderer.h"
#include "Food.h"
#include "Food.cpp"
#include <iostream>


TileRenderer::TileRenderer(int tileSize, int level)
    : tileSize(tileSize)
{
    checklevel(level);
    initializeFood();
    if (!texture0.loadFromFile("Assets/Textures/48x48Map.png")) {
        cerr << "Failed to load texture0 from: " << " texturePath0" << endl;
    }
    if (!texture1.loadFromFile("Assets/images/PMSprites.png")) {

        cerr << "Failed to load texture0 from: " << "texturePath1" << endl;
    }

    sprite0.setTexture(texture0);
    sprite1.setTexture(texture1);

    sprite0.setScale(
        tileSize / (float)texture0.getSize().x,
        tileSize / (float)texture0.getSize().y
    );
    sprite1.setScale(
        tileSize / (float)texture1.getSize().x,
        tileSize / (float)texture1.getSize().y
    );

}

// Draw function
void TileRenderer::draw(RenderWindow& window) {
    for (size_t i = 0; i < Graph::pacmanMatrix.size(); ++i) {
        for (size_t j = 0; j < Graph::pacmanMatrix[i].size(); ++j) {
            if (Graph::pacmanMatrix[i][j] == 0) {
                sprite0.setPosition(j * tileSize, i * tileSize);

                window.draw(sprite0);
            }
<<<<<<< HEAD
            else if (Graph::pacmanMatrix[i][j] == 1) {
                sprite1.setPosition(j * tileSize, i * tileSize);
                sprite1.setScale(1, 1);
                window.draw(sprite1);
=======
        }
    }
    for (const auto& food : foodList) {
        if (food) {
            food->draw(window);
        }
    }
}
void TileRenderer::initializeFood() {
    foodList.clear(); // Clear existing food first
    srand(static_cast<unsigned>(time(0))); // Better random seed

    for (size_t i = 0; i < Graph::pacmanMatrix.size(); ++i) {
        for (size_t j = 0; j < Graph::pacmanMatrix[i].size(); ++j) {
            Vector2f position(j * tileSize, i * tileSize);

            if (Graph::pacmanMatrix[i][j] == 1) {
                int randomChoice = rand() % 100;

                if (randomChoice < 5) {
                    foodList.push_back(std::make_unique<Fruit>(position));
                }
                else if (randomChoice < 10) {
                    foodList.push_back(std::make_unique<Skill>(position));
                }
                else {
                    foodList.push_back(std::make_unique<Dot>(position));
                }
>>>>>>> df484b6ffb1d6458f126ea2e8cf430d76e25f1d6
            }
        }
    }
}

std::vector<std::unique_ptr<Food>>& TileRenderer::getfoodList() {
    return foodList; 
}
void TileRenderer::checklevel(int level) {
    if (level == 0)
    {
        Graph::pacmanMatrix = {
     {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
     {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,8,8,8,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
     {0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,8,8,8,8,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0},
     {0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,1,1,1,1,0},
     {0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0},
     {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
     {0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0},
     {0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0},
     {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
     {0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0},
     {0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0},
     {0,0,0,1,1,0,1,0,0,1,1,1,1,1,1,1,0,7,7,7,7,7,7,0,1,1,1,0,0,1,1,1,1,1,0,1,0,0,0,0},
     {0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0},
     {0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0},
     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
     {0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0},
     {0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0},
     {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0},
     {0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0},
     {0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0},
     {0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,9,1,1,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0},
     {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0}
        };
    }
    else if (level == 1)
    {
        Graph::pacmanMatrix = {
          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,8,8,8,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
          {0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,1,0,8,8,8,8,0,1,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0},
          {0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0},
          {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
          {0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0},
          {0,1,0,0,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0},
          {0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0},
          {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
          {0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0},
          {1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1},
          {0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,7,7,7,7,7,7,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0},
          {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
          {0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0},
          {0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0},
          {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
          {0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0},
          {0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0},
          {0,1,0,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,1,0},
          {0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0},
          {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,9,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        };

    }
    else {

        Graph::pacmanMatrix = {
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,8,8,8,8,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0},
      {0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,8,8,8,8,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0},
      {0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0},
      {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
      {0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0},
      {0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0},
      {0,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,0},
      {0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0},
      {0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0},
      {1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1},
      {0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,7,7,7,7,7,7,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0},
      {0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0},
      {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
      {0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0},
      {0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0},
      {0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0},
      {0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,0,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0},
      {0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0},
      {0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0},
      {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        };
    }


}

<<<<<<< HEAD

int TileRenderer::eating(pacman player) 
{

    return 1;
}


void TileRenderer::draweating(RenderWindow& window,pacman player) {
    int count = eating(player);
    string number = to_string(count);
    Font font;
    font.loadFromFile("Assets/font/Prison Tattoo.ttf");   //font
    Text t;
    t.setFont(font);
    t.setCharacterSize(55);
    if (count < 10) t.setPosition(910, 45);
    else if (count < 100)t.setPosition(890, 45);
    else t.setPosition(880, 45);
    t.setFillColor(Color::White);
    t.setString(number);
    sprite1.setScale(1.5, 1.5);
    sprite1.setPosition(965, 40);

    window.draw(sprite1);
    window.draw(t);

}

=======
>>>>>>> df484b6ffb1d6458f126ea2e8cf430d76e25f1d6
